// Code generated by go-bindata. DO NOT EDIT.
// sources:
// system.json (30.175kB)

package proto

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _systemJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xfb\x6f\xdb\xba\x15\xfe\x3d\x7f\x05\xa1\x61\x40\x0a\xc4\x89\x65\xcb\x4f\xa0\x77\xe8\x4d\x9b\xe1\x62\xbb\x5d\xb0\xb6\xd8\x0f\x4d\x90\xd0\xe2\x91\x4d\x44\x22\x35\x92\xf2\x63\x5d\xff\xf7\x81\x92\x65\xcb\xb2\xe8\xd9\x89\x9f\xd7\x0a\xd0\x46\xe2\xf3\x1c\xf2\x93\xbe\xef\x50\x94\xf2\xe3\x02\x21\x8b\xe1\x00\xac\x2e\xb2\xe4\x44\x2a\x08\xac\x2b\x9d\x46\x89\x4e\xa9\x2e\xfe\xd8\x49\x1e\xc1\x72\xd0\xe3\x58\x10\x69\x75\xd1\xf7\x0b\x84\x10\xfa\x11\xff\x9f\xcd\xb3\xba\xb3\xc4\x4c\x17\x5f\xe6\x5d\xa4\x15\x40\xba\x82\x86\x8a\x72\xa6\x0b\x7c\x40\x2e\xf7\x7d\x70\xf5\x39\xe2\x1e\x8a\x24\x78\x91\x8f\x86\x54\x46\xd8\xa7\xff\xc1\x3a\x5d\x22\x8f\x0b\x14\x70\x46\x15\x17\x94\xf5\xd1\x84\x47\x02\x2d\x37\xed\x82\xef\xcf\x4d\x4c\x7e\x7e\x64\x8e\xe7\x6e\xd6\x9d\x5e\xb5\xea\xb5\x48\xa3\xe7\x36\xaa\xd5\x6a\xa6\x91\xb8\xd4\xd8\xea\xa2\x6a\x2e\x6d\x52\x90\x36\xb2\xba\xc8\xae\xe5\x12\x07\x3a\x31\x93\xf4\xf3\x6a\x2d\x73\x6a\xed\x4e\xbb\x53\xdf\xc8\x1c\xbb\xc0\x9c\xfa\x76\xac\x71\x1c\xaf\xd6\xf0\x8c\xd6\xe4\x7b\x31\x59\xb3\xa5\xb1\x71\x9a\xad\x5e\xdd\x3c\x55\x8d\xfd\x5a\xd3\x70\x1a\xc4\x33\xcf\x54\x6b\xbf\xd6\x34\x6b\x3d\xa7\x65\x9e\xa9\x22\xdc\xe4\x7b\x36\xe1\xa6\xfe\x0a\x6b\x9c\x76\x83\x98\x67\xaa\x08\x37\xbb\xb4\x86\x34\x7b\x8e\xd9\x9a\xe6\x7e\xad\x69\x39\x0d\x58\x31\x36\x9d\x37\x5c\xe1\xce\xe6\xd6\xb4\x6b\x75\xbc\xc2\x9a\x22\xdc\xe4\xaf\xb3\x2d\x8e\x4d\xdb\xb1\xdb\x9d\xcd\x70\xb3\x4b\x6b\xa0\xda\xc2\x9b\xe1\x66\x87\xd6\x74\xec\xa6\xeb\x9a\xef\x37\x45\xb8\x79\x95\x35\xb3\xe3\xc7\x8b\x9c\x7d\xd6\x90\xc2\x48\x2e\x32\xfc\x12\x87\x76\x17\x5c\x58\x87\x69\x67\x2a\xe1\x33\x0e\x00\xa9\x01\x95\xe8\x16\x7c\x7f\xb1\x4c\x28\x78\x08\x42\x51\x90\xb9\x1e\x10\xb2\xe4\x00\x87\x71\x03\xee\x40\x70\xc6\xfb\x02\x7b\x95\x61\x2d\x3f\x48\x6a\x92\x14\x0a\xb0\x78\x21\x7c\xc4\xf2\xf9\x8c\xab\x38\xff\xab\x36\x60\xa6\x67\x50\x9f\x0e\x41\x6a\xa9\x81\x30\x43\x7c\x08\x42\x0f\x82\x96\x28\x89\xf0\x40\x01\x28\x41\x5d\x89\x46\x54\x0d\x66\x27\x9e\xe0\x01\x7a\x4e\x84\xd5\xf3\x15\x7a\x0e\x92\x5f\x84\xca\x17\xca\xf5\x91\x1c\xe1\xf0\x19\x61\x46\xd0\x33\x03\xf5\x8c\x02\xc0\x32\x12\x10\x00\x53\xf2\x1a\x7d\x01\x3d\x0e\x80\xbe\x7f\x05\x1f\xb4\x3b\xe8\x23\x77\x23\x9d\x19\x0b\xa1\xc7\xcb\x81\x52\xa1\xec\xde\xdc\xf4\xa9\x1a\x44\xbd\x6b\x97\x07\x37\x94\x79\x7e\x34\x26\x58\xe1\x1b\x35\xad\x75\xa3\x04\xc0\x4d\x80\xa5\x02\x71\x13\xfa\x51\x9f\x32\x79\x43\x59\x18\x29\x79\x93\xd8\xf6\x2e\x96\x54\x03\xf0\x43\xe4\x72\xe6\xd1\x7e\x14\x0b\x2b\x35\x00\x09\x68\x5a\xe3\xda\x2a\x44\x47\x06\xb5\xcb\xca\xc5\x0c\x02\x93\xbe\xc9\x49\x45\xf4\x2d\x54\x34\x80\x5d\x61\x40\x52\xd6\xf7\xa1\x22\x15\x56\xf9\x22\xff\x8e\x40\x24\x3d\x7c\x5f\xc8\xc8\x5f\x9a\x49\x7b\x30\x56\xba\x3d\x3d\xdf\x97\xbd\xc8\x7d\x01\xd5\x45\x0f\x16\x01\x0f\x47\xbe\x7a\xb0\xde\x3d\x30\x84\xfe\xfb\x0b\x12\x98\xf5\xe1\x52\x2a\x2c\x54\x17\x0d\xaf\xb5\x6b\xff\xd4\x49\x5f\x74\x4a\x5a\xc8\xa3\xbe\x02\x71\xe9\xb1\x2e\xba\x14\xef\xd0\xfb\x5f\x90\xb8\x7e\xca\x00\x03\xbd\x7f\x8f\x1e\xa6\x6a\x7d\xde\x74\x61\x2d\x8f\x82\x4f\x92\xf2\x51\x3c\x90\xf3\xf2\x23\xca\x08\x1f\x5d\x86\x20\x28\x27\x5d\x64\x0f\xd2\x0c\x1f\x4b\x75\x99\x9e\xf4\x05\x8f\xc2\x4b\x97\xfb\x51\xc0\x64\x17\x7d\x7f\xb0\x9e\x86\xd8\x8f\xe0\xc1\xba\x42\x0f\xd6\x53\xd2\x64\x7c\x18\x3b\x35\x3b\xe6\xe1\x83\xf5\x78\x85\x02\x4e\x40\x0f\x04\x8c\x5d\x08\x33\xe3\x10\xe0\x30\x67\x69\xdc\x2a\xba\x41\xed\xa6\x53\xad\x5e\xa1\x00\x44\x1f\xfe\x06\x93\x2e\x52\x22\x82\xb4\xda\x44\xbb\x73\xa9\x11\xa2\x1b\xd5\x86\x4e\x9b\x4c\xff\xe5\x26\x71\x61\xae\xf5\x65\x51\x94\x2f\x79\x24\x5c\xf8\xed\xa3\x2e\x53\x94\x0f\x84\xaa\xdf\x39\x89\xdb\xc0\x64\x88\x99\x0b\xa4\xa8\x5c\x0a\xdc\xa2\xbc\x5e\x44\x7d\x02\xe2\x36\xbe\xb6\x96\x40\x3b\x2b\xa4\x71\x13\x23\x2e\x45\x8e\xf5\xb8\xdc\x98\x76\x09\xf7\x8b\x80\x69\x82\xe7\xb4\xd6\x0b\x68\x2e\xb0\xb2\x50\x2a\xb0\x75\x5a\x38\x9e\x8f\xc4\x96\x69\x5c\xf8\x58\x58\xf4\x67\x71\x0b\xff\xd7\x88\x18\x99\x6b\x75\x9f\x00\x77\xbb\xdd\x0f\xb8\x5c\xcb\x77\x43\xa7\x05\xa9\xc5\x13\xe5\x45\x2c\x0e\x65\x5f\x31\x5b\x29\x9c\x34\xca\xad\xf5\xcd\x58\x4a\xcb\x97\x5a\x3c\xcf\x99\x6d\x85\x02\x3c\x3a\x2e\x80\xb1\x25\x23\x6f\x9a\x83\x08\x9e\xc8\x7c\xb6\xcb\x7d\x2e\xd6\xbc\x5b\x26\x34\xd0\xc3\x12\x56\x5d\xaf\xf1\x3d\xb5\x20\x7f\x00\xb1\x15\x7f\xaa\x56\x6f\x3b\x77\x77\xab\xae\x44\x1f\x4b\x10\x45\x05\xe2\x09\xd6\xaa\x76\xa3\xb1\x21\xe0\xd2\x00\xfb\xf7\x3e\x76\x0b\x98\x47\xfb\x25\x3f\x31\x8f\x0b\x7d\x7f\xe8\x22\x0f\xfb\x12\xf2\x7d\x5b\x84\xf6\x69\x7c\x89\xd7\x16\x72\x7e\x1a\x34\xc8\xd2\x24\x0c\xf8\xe8\x33\x57\xf0\xaf\x01\xb0\x4f\x41\xa8\x26\x69\x47\xeb\x51\x73\x36\x8c\x37\x53\xb3\x29\xd8\x9f\x8d\x2b\xbb\xbd\xff\x26\x4b\x4a\x7e\x33\x25\xb3\x27\x37\x8c\xa4\x91\x92\x87\xd7\x49\xc2\x7d\x7c\xbe\x4f\x7a\x2e\xe4\xd9\x5d\x73\xeb\x94\x23\x4b\x6a\x4d\x7f\x76\x4f\xad\x09\x00\x4b\x6a\x5d\xcf\x8c\x7d\x50\x6b\x3c\x1f\x25\xb5\xae\xa6\x56\x1d\x12\x1c\x1b\xb3\x66\x96\xa4\x57\x30\xab\x61\xe1\x3a\x1f\xf4\xfe\x9d\x63\x52\xf2\xeb\x9b\xf9\xd5\xe7\x98\xd8\x1b\xd2\x6b\x00\x98\xed\x97\x5e\x75\x8f\x25\xbd\x16\xa3\x6c\x5a\xeb\x44\xe9\x35\xc6\xdf\xd9\xb2\xab\xc6\xf5\x71\xb1\x6b\x49\xac\xa7\x47\xac\xd9\xa7\xab\x66\x62\x35\x3d\x83\x9d\x0d\xeb\x57\xae\xb0\x8f\x7e\x87\x80\x8b\x49\xc9\xac\x4b\xcc\x1a\x6c\x42\xab\x4a\x8f\xe5\x5b\xa2\x56\xf3\xea\xaf\x5d\xad\x39\x8b\xbf\x4c\x4b\xc1\xfb\x8c\x7c\xcb\x95\x65\x13\x56\xa7\xb5\x5e\xcb\xcf\xc1\x01\xc9\x39\x46\xf1\xd9\x92\xf3\x11\x86\xbe\x7f\xfd\xb5\xe4\xe7\xd3\xe3\xe7\xec\x7e\x23\x33\x3f\x9b\x76\x25\xcd\x86\xf5\x23\x95\x2f\xe8\x9b\xc4\xfd\xad\x3f\xea\x3d\x76\xea\x25\x54\xbe\x6c\xf0\x14\x57\x02\x79\x0a\x41\xb8\xc0\x54\x19\xd9\x9e\x6f\x64\xab\x51\x73\xb8\x27\xb2\x19\x10\x6e\xd7\x08\x4f\xc6\xc0\x38\x0d\x0e\xdd\x6f\x80\x8b\xc7\xc5\x04\x31\x2e\x84\xae\xd5\xe3\x11\x4b\x36\x68\x5b\xd6\x15\xb2\x8a\x40\x6b\xf9\xb8\x07\xbe\xe9\xf2\x30\x72\x36\x5a\x19\x54\x27\x9d\x6b\x1a\xee\x22\xcb\xce\xef\x50\x4b\xea\xba\xd8\x4f\xb8\x94\x32\xc0\x22\x3f\x84\x4b\xd0\x89\xb7\xb0\x1d\xd2\xc5\x3f\xef\xc3\xc7\xda\x1f\x6e\x1e\x57\xca\x91\x94\x00\xc6\x93\x3c\x61\xfb\xd0\x07\x16\xbf\x3f\x90\xaf\xd3\x07\x1e\xa4\xfd\x99\xb5\x62\xfe\xc2\xd9\x95\xf0\xc9\x6c\x6d\x5e\x21\x7c\x0c\x1b\xa0\x67\x37\x91\xdb\xfb\x6f\xe7\xa9\x7b\xdc\x30\xda\x44\xf6\xe0\x3e\x3c\x45\x12\xc4\x83\x85\xb8\x28\xcc\x4d\x9f\x0e\x98\xf2\x29\xf1\x61\x75\x8f\x6e\x18\xcd\x6c\xab\xbc\x66\x95\xa3\x94\x58\x8b\x79\x27\x2d\xb1\xdc\x30\x3a\xa0\xc2\x4a\xf1\xae\x6f\xfa\x59\x7c\xcf\xcf\x35\x9e\xb7\x6b\xa0\xf6\x78\xcd\x91\xa9\x9c\xf7\xf2\x49\x29\xfd\x4a\xe9\x57\x4a\xbf\xb3\x95\x7e\x99\xf7\xc8\x56\x48\x3f\xc3\xdb\x66\xfb\xd8\xec\x71\xec\xe2\xef\x95\x3b\x39\x96\xa5\x9d\xce\x68\x98\x32\xec\x46\xa9\xdf\xce\x57\xbf\x1d\xc5\xe6\x8f\x2b\x94\x40\x34\x3d\xb0\x1b\xa5\x66\x5a\xcf\x8c\x52\x33\xa5\x75\x0f\xa1\x99\x96\x48\xe9\x08\xdd\x2c\x65\x53\xea\xcd\x69\xc8\xa6\xec\x0b\xef\x66\xd9\x64\x7a\x2d\x7e\x76\x1f\x49\x36\xf1\x9c\xe7\xa2\xd9\x46\xfb\x74\xca\x67\x85\x49\xfe\xb9\x0b\xa1\x43\xee\xb2\xd9\xdd\xa3\xc2\x52\xf9\x14\x9b\x5d\x2a\x9f\xc3\xb9\x58\xae\x16\xed\x4e\xf6\xe8\xba\x95\xd0\x8f\x64\x65\xc5\x3e\x5b\xb3\x12\xfa\x63\xec\x25\xcb\x97\x35\x1a\xef\xd6\xbc\x4e\xad\x46\xbc\x4a\xb3\x8a\xed\x8a\xe3\xb4\xec\x4a\xc7\xf6\xdc\x8a\x6b\x37\x9d\x5a\x0b\x5a\x9e\xeb\xf5\x56\x39\x97\x4c\xd9\x0a\xef\xda\x77\xed\x0f\x77\xce\x2a\xef\x3e\x72\xf4\x81\x11\xc1\x29\x91\xe8\xa3\x00\x1c\x20\xee\xa1\x4f\x3e\xb8\x4a\x50\x17\x7d\x19\x00\x84\x7f\xd9\x8d\xf3\xf5\x7a\xd5\x6b\x79\x00\x15\xe2\x38\x50\x71\xb0\xdd\xa8\xf4\x6a\xa4\x59\xa9\xd5\xeb\x55\xbb\xd5\x06\xb7\x56\xad\xbf\xc9\xf9\x0f\x0d\xdb\xb1\x8f\xd4\x79\xa8\xbb\xad\x3a\xf4\xea\x95\x66\xb3\x81\x2b\x8e\xed\xf4\x2a\xd8\x23\xa4\x62\x37\xdb\x4d\xb7\xd3\xeb\x34\x6b\xa4\xf3\x26\xe7\xef\x9c\xdb\xbb\xba\xbd\x57\xe7\x57\xf2\xdd\x3a\x9b\x4b\xf3\x37\xe6\xad\xee\xbb\xb4\x57\xde\xbf\x76\x14\x4c\x65\xbf\xd7\x65\x0e\xa6\x4c\x5f\xf5\x5a\xdc\x77\xf9\xdb\x3f\xce\x2d\x8e\x4a\x3e\xc0\xb4\x7e\x28\x25\x00\x93\xa7\xde\x44\x81\x2c\x5a\x6b\x1e\x09\xaa\x20\xcd\x4e\x9b\x24\x20\xe8\x10\x2b\x3a\x84\xcb\x88\x51\x95\x8f\xb4\xae\x10\xe3\xec\x33\xf4\xe3\x12\xd3\x99\x2f\x8e\x8c\xe6\x0d\x95\xf1\x51\x31\x82\xa6\xb5\xde\xb2\x97\x92\xf2\x83\x85\x48\x73\x6c\x69\xdd\x96\xc1\xd2\xd9\xc6\x4b\x73\xc4\x97\x51\xd3\x89\x44\x4d\xbf\x26\xf8\x3d\x6e\x3f\xcf\x34\x72\x3a\xd9\x05\xe3\xec\x57\x40\x57\x68\x1c\xc3\xb7\x42\xe7\x9f\x93\x04\x35\xe2\xe2\xe5\xdc\x34\x0e\x03\xb5\xbe\xc0\x89\x09\xe7\x49\x80\x3b\x2c\x12\x38\x49\xae\x5c\x58\x47\x2e\xf5\xcd\x72\xa1\xe3\xd4\x37\x0c\xb6\xbc\xf4\xba\x81\xb8\x99\xe3\x4a\xdf\x5a\xe7\x38\x2a\xb5\x4d\xa9\x6d\x4a\x6d\x53\x6a\x9b\xf3\xd5\x36\x99\x6f\x8a\xaf\xd0\x36\x86\x2f\x8f\xcf\x6e\x27\xf7\x82\xbb\x20\x25\x6c\xfd\x73\x8c\xc7\xae\x6e\xc2\xd4\xf1\x0d\x16\x71\x22\xc6\x28\xeb\x17\x0a\x1c\x9f\xbb\x2f\x40\x8a\xb2\x92\xd7\x46\x0a\x5e\x2a\x61\x2f\x8c\x8f\xd8\xa6\x0f\xd6\xf1\x78\xcf\xcf\xd5\xf1\xb8\x94\x55\xc5\xb0\x9d\xd6\x7a\xad\xac\x9a\x21\xf0\x70\x2b\x47\x09\xa0\x63\x65\x95\x00\x58\x1f\xc6\xef\x85\x5c\xa1\x14\xa0\x67\xab\xb4\x02\x3c\x2e\x25\xd6\x89\x48\xac\x63\x77\xb1\x54\x57\xa9\x37\xa7\xa1\xae\xb2\x7f\x23\xc5\xac\xae\x4c\x7f\x49\x65\xfe\x86\xc6\x08\x87\xe7\x26\xac\xe4\x08\x87\x1b\x7f\x0b\xac\xe8\x9d\x5b\x2d\xa7\xca\x4d\x87\xe7\xaa\x8e\x34\x8c\x0e\xfc\x6d\xaf\xf8\x4d\x59\x20\xe7\x2b\x80\xca\x6d\x87\xa5\x02\x2a\x15\xd0\x79\x28\xa0\x8b\xec\x6f\xfd\xff\xe3\xc5\xcf\x8b\xff\x05\x00\x00\xff\xff\x1d\xd5\xbb\x1b\xdf\x75\x00\x00")

func systemJsonBytes() ([]byte, error) {
	return bindataRead(
		_systemJson,
		"system.json",
	)
}

func systemJson() (*asset, error) {
	bytes, err := systemJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "system.json", size: 30175, mode: os.FileMode(436), modTime: time.Unix(1552565960, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xc7, 0xe4, 0xf, 0xb, 0x2a, 0x2b, 0xdf, 0x81, 0x2d, 0xad, 0x71, 0x85, 0x14, 0xf9, 0xc1, 0xad, 0xd1, 0x56, 0x81, 0xb6, 0xde, 0x70, 0xa9, 0x59, 0xfe, 0xd6, 0xde, 0x2, 0x79, 0x67, 0x5a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"system.json": systemJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"system.json": &bintree{systemJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
//lint:file-ignore ST1005 Ignore error strings should not be capitalized
