version: 2.1

orbs:
  terraform: circleci/terraform@2.1.0

executors:
  docker-go:
    docker:
      - image: cimg/go:1.17

  linux-amd64:
    machine:
      image: ubuntu-2004:202107-02
      resource_class: large

  linux-arm64:
    machine:
      image: ubuntu-2004:202101-01
      resource_class: arm.large

  mac:
    macos:
      xcode: 12.4.0
      resource_class: medium
    shell: /bin/bash -eo pipefail

  windows:
    machine:
      image: windows-server-2019-vs2019:stable
      resource_class: windows.medium
    shell: bash.exe -eo pipefail

parameters:
  aws-teardown:
    default: false
    type: boolean
  aws-teardown-branch:
    default: "n/a"
    type: string
  aws-teardown-sha:
    default: "n/a"
    type: string
  aws-teardown-datestring:
    default: "n/a"
    type: string
  aws-teardown-query-format:
    default: "n/a"
    type: string

workflows:
  version: 2

  build-and-test:
    when:
      not: << pipeline.parameters.aws-teardown >>
    jobs:
      - lint
      - build:
          build-type: snapshot
          matrix:
            parameters:
              executor:
                - linux-amd64
                - linux-arm64
                - mac
                - windows
      - package-linux:
          requires:
            - build-linux-amd64
            - build-linux-arm64
      - stage-artifacts:
          requires:
            - package-linux
            - build-mac
            - build-windows
      - test:
          matrix:
            parameters:
              executor:
                - linux-amd64
                - linux-arm64
                - mac
                - windows
      - packaging-test:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
          requires:
            - lint
            - package-linux
      - perf-test:
          name: perf-test-flux
          format: flux-http
          record-ingest-results: true
          requires:
            - packaging-test
          filters:
            branches:
              only: dm-parallel-native-build-20855
      - perf-test:
          name: perf-test-influxql
          format: http
          record-ingest-results: false
          requires:
            - packaging-test
          filters:
            branches:
              only: dm-parallel-native-build-20855

  aws-destroy-callback:
    when: << pipeline.parameters.aws-teardown >>
    jobs:
      - aws-destroy-by-name

commands:
  setup:
    steps:
      - run:
          name: Install system dependencies
          command: ./scripts/ci/setup-system.sh
      - run:
          name: Install Go
          command: |
            ./scripts/ci/install-go.sh ${HOME}/.tools
            echo 'export PATH=${HOME}/.tools/go/bin:${PATH}' >> $BASH_ENV
      - run:
          name: Set GOPATH and GOCACHE
          command: |
            GOPATH=${HOME}/go
            echo "export GOPATH=${GOPATH}" >> $BASH_ENV
            mkdir -p ${GOPATH}/bin
            echo 'export PATH=${GOPATH}/bin:${PATH}' >> $BASH_ENV
            mkdir -p ${HOME}/.cache
            echo 'export GOCACHE=${HOME}/.cache' >> $BASH_ENV
      - run:
          name: Install Rust toolchain
          command: |
            ./scripts/ci/install-rust.sh
            echo 'export PATH=${HOME}/.cargo/bin:${PATH}' >> $BASH_ENV
      - run:
          name: Install pkg-config wrapper
          command: go build -o "${GOPATH}/bin/" github.com/influxdata/pkg-config

jobs:
  lint:
    executor: linux-amd64
    steps:
      - checkout
      - setup
      - run: make checktidy
      - run:
          name: Check flag generation
          command: ./scripts/ci/lint/flags.bash
      - run: make checkgenerate
      - run: go vet -v ./...
      - run: make checkfmt
      - run: go install honnef.co/go/tools/cmd/staticcheck
      - run: staticcheck ./...

  build:
    parameters:
      executor:
        type: executor
      build-type:
        type: string
        enum:
          - snapshot
          - nightly
          - release
    executor: << parameters.executor >>
    steps:
      - checkout
      - setup
      - run:
          name: Generate UI assets
          command: make generate-web-assets
      - run:
          name: Build release binary
          command: |
            DEST=dist/influxd_$(go env GOOS)_$(go env GOARCH)
            mkdir -p "$DEST"
            ./scripts/ci/build-influxd.sh "$DEST" "<< parameters.build-type >>"
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist

  package-linux:
    executor: docker-go
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build linux packages
          command: ./scripts/ci/package-linux.sh
      - persist_to_workspace:
          root: .
          paths:
            - dist

  stage-artifacts:
    executor: docker-go
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Prep artifacts
          command: |
            mkdir artifacts
            ./scripts/ci/prepare-artifacts.sh $(pwd)/artifacts
      - store_artifacts:
          path: artifacts

  test:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    parallelism: 8
    steps:
      - checkout
      - setup
      - run:
          name: Download gotestsum
          command: |
            GOTESTSUM_VERSION=1.6.4
            GOTESTSUM_ARCHIVE=gotestsum_${GOTESTSUM_VERSION}_$(go env GOOS)_$(go env GOARCH).tar.gz
            GOTESTSUM_URL=https://github.com/gotestyourself/gotestsum/releases/download/v${GOTESTSUM_VERSION}/${GOTESTSUM_ARCHIVE}

            wget ${GOTESTSUM_URL}
            tar xzf ${GOTESTSUM_ARCHIVE}
            install gotestsum ${GOPATH}/bin/
      - run:
          name: Run race tests
          command: |
            mkdir test-results
            GO_TEST_CMD="gotestsum --format standard-quiet --junitfile ./test-results/gotestsum.xml -- -p=4"
            TESTFILES=($(go list ./... | circleci tests split --split-by=timings))
            make PKG_CONFIG="${GOPATH}/bin/pkg-config" GO_TEST_CMD="$GO_TEST_CMD" GO_TEST_PATHS="${TESTFILES[*]}" test-go-race
      - store_artifacts:
          path: ./test-results
          destination: raw-test-output
      - store_test_results:
          path: ./test-results

  packaging-test:
    executor: terraform/default
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "91:0a:5b:a7:f9:46:77:f3:5d:4a:cf:d2:44:c8:2c:5a"
      - terraform/validate:
          path: scripts/ci/
      - run:
          name: Terraform apply
          command: |
            set -x
            export DEBNAME="$(find /tmp/workspace/dist/influxd_linux_amd64/influxdb2*amd64.deb)"
            terraform -chdir=scripts/ci init -input=false
            AWS_ACCESS_KEY_ID=$TEST_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TEST_AWS_SECRET_ACCESS_KEY terraform \
              -chdir=scripts/ci \
              apply \
                -auto-approve \
                -var package_path=${DEBNAME} \
                -var instance_name=circleci-terraform-${CIRCLE_SHA1} \
                -var additional_files_dir=${PWD}/scripts/ci/tests/
      - run:
          name: Install deb
          command: |
            set -x
            export ec2_ip=$(terraform -chdir=scripts/ci output -raw test_node_ssh)
            ssh -o "StrictHostKeyChecking=no" ubuntu@$ec2_ip \<< EOF
            sudo apt-get update && sudo apt-get install -y /home/ubuntu/influxdb.deb
            EOF
      - run:
          name: Run tests
          command: |
            set -x
            export ec2_ip=$(terraform -chdir=scripts/ci output -raw test_node_ssh)
            files=$(ssh -o "StrictHostKeyChecking=no" ubuntu@$ec2_ip 'find /home/ubuntu/files/ -maxdepth 1 -mindepth 1 | sort')
            for file in $files; do
              ssh -o "StrictHostKeyChecking=no" ubuntu@$ec2_ip "sudo $file"
            done
      - run:
          name: Terraform destroy
          when: always
          command: |
            AWS_ACCESS_KEY_ID=$TEST_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TEST_AWS_SECRET_ACCESS_KEY terraform \
              -chdir=scripts/ci \
              destroy \
                -auto-approve

  perf-test:
    executor: linux-amd64
    parameters:
      format:
        type: string
      record-ingest-results:
        type: boolean
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "91:0a:5b:a7:f9:46:77:f3:5d:4a:cf:d2:44:c8:2c:5a"
      - run:
          name: Run test in AWS instance
          no_output_timeout: 20m
          command: >
            AWS_ACCESS_KEY_ID=${TEST_AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY=${TEST_AWS_SECRET_ACCESS_KEY}
            TEST_FORMAT=<< parameters.format >>
            TEST_RECORD_INGEST_RESULTS=<< parameters.record-ingest-results >>
            scripts/ci/perf_test.sh

  aws-destroy-by-name:
    executor: linux-amd64
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "91:0a:5b:a7:f9:46:77:f3:5d:4a:cf:d2:44:c8:2c:5a"
      - run:
          name: Destroy AWS instances by constructing name from arguments
          no_output_timeout: 20m
          command: |
            set -x
            name=oss-perftest-<< pipeline.parameters.aws-teardown-datestring >>-<< pipeline.parameters.aws-teardown-branch >>-<< pipeline.parameters.aws-teardown-sha >>-<< pipeline.parameters.aws-teardown-query-format >>
            instance_id=$(AWS_ACCESS_KEY_ID=${TEST_AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${TEST_AWS_SECRET_ACCESS_KEY} aws --region us-west-2 ec2 describe-instances --filters "Name=tag:Name,Values=$name" --query 'Reservations[].Instances[].InstanceId' --output text)
            AWS_ACCESS_KEY_ID=${TEST_AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${TEST_AWS_SECRET_ACCESS_KEY} aws --region us-west-2 ec2 terminate-instances --instance-ids $instance_id
