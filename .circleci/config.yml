version: 2.1
orbs:
  aws-s3: circleci/aws-s3@2.0.0
parameters:
  cross-container-tag:
    # when updating the go version, should also update the go version in go.mod
    description: docker tag for cross build container from quay.io . Created by https://github.com/influxdata/edge/tree/master/dockerfiles/cross-builder .
    type: string
    default: go1.18-0b1bcef254c3fba55196c070cc39c7aad58a9068

commands:
  install_rust:
    steps:
      - run:
          name: Install Rust toolchain
          command: |
            ./scripts/ci/install-rust.sh
            echo 'export PATH=${HOME}/.cargo/bin:${PATH}' >> $BASH_ENV

jobs:
  build_binaries:
    docker:
      - image: quay.io/influxdb/cross-builder:<< pipeline.parameters.cross-container-tag >>
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - restore_cache:
          keys:
            # We save the cache from this one, so don't restore a cache with old junk and then save new stuff alongside.
            # Start either with the exact right cache, or completely fresh.
            - influxdb-cache-v1-{{ checksum "go.mod" }}
      - run:
          name: Build source tarball
          command: |
            set -x

            INFLUXDB_COMMIT=$(git rev-parse --short HEAD)
            INFLUXDB_VERSION=$(releng/get-version -p 1.x)

            printf '{
                "version": "%s",
                "branch": "%s",
                "sha": "%s"
            }' "${INFLUXDB_VERSION}" "${CIRCLE_BRANCH}" "${INFLUXDB_COMMIT}" >"$(pwd)/.metadata.json"

            #
            # Prebuild the man pages so that consumers of the source tarball don't have to build it themselves.
            (cd man && make build && gzip -9 ./*.1)

            mkdir -p ./tarball
            TARBALL_NAME="./tarball/influxdb-src-${CIRCLE_SHA1}.tar.gz"
            tar --exclude-vcs --exclude './tarball' --transform 'flags=r;s|^|influxdb/|' -vczf "${TARBALL_NAME}" .
      - store_artifacts:
          path: tarball/
      - persist_to_workspace:
          root: .
          paths:
            - tarball
      - run:
          name: Build binaries
          command: |
            set -x

            tarsum()
            {
              FROM_DIR=$1
              TARBALL_PATH=$2
              tar -C $FROM_DIR -cvzf ${TARBALL_PATH} .
              md5sum ${TARBALL_PATH} > ${TARBALL_PATH}.md5
              sha256sum ${TARBALL_PATH} > ${TARBALL_PATH}.sha256
            }

            export CC=/usr/local/bin/xcc.sh
            export CGO_ENABLED=1

            INFLUXDB_COMMIT=$(git rev-parse --short HEAD)
            INFLUXDB_VERSION=$(releng/get-version)

            # linux amd64 (static build)
            TMPOUTDIR=$(mktemp -d)
            export GOOS=linux
            export GOARCH=amd64
            for cmd in github.com/influxdata/influxdb/cmd/{influxd,influx,influx_inspect}
            do
              go build \
                -o "${TMPOUTDIR}/$(basename $cmd)" \
                -tags "netgo osusergo static_build" \
                -ldflags="-s
                  -X main.version=${INFLUXDB_VERSION}
                  -X main.branch=${CIRCLE_BRANCH}
                  -X main.commit=${INFLUXDB_COMMIT}
                  -extldflags \"-fno-PIC -Wl,-z,stack-size=8388608\"" \
                ${cmd}
            done

            mkdir -p ./bins
            tarsum $TMPOUTDIR ./bins/influxdb_bin_${GOOS}_${GOARCH}-${CIRCLE_SHA1}.tar.gz
      - store_artifacts:
          path: bins/
      - persist_to_workspace:
          root: .
          paths:
              - bins 
      - save_cache:
          key: influxdb-cache-v1-{{ checksum "go.mod" }}
          paths:
            - /go/pkg/mod
            - /root/.cargo
            - /root/.cache/go-build
  build_packages:
    machine:
      enabled: true
      docker_layer_caching: true
      image: ubuntu-2004:202107-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Build packages
          command: |
            set -x

            WORKING_DIR=$(pwd)
            OUTDIR=${WORKING_DIR}/packages

            # InfluxDB debs and rpms
            # linux
            "${WORKING_DIR}/releng/packages/build.bash" \
              -s "/tmp/workspace/tarball/influxdb-src-${CIRCLE_SHA1}.tar.gz" \
              -b "/tmp/workspace/bins/influxdb_bin_linux_amd64-${CIRCLE_SHA1}.tar.gz" \
              -O linux -A amd64 \
              -o "$OUTDIR"
      - store_artifacts:
          path: packages/
      - persist_to_workspace:
          root: .
          paths:
            - packages
  test_pkgs_64bit:
    machine:
      enabled: true
      docker_layer_caching: true
      image: ubuntu-2004:202107-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Test 64 bit packages install
          command: |
            set -x
            export WORKING_DIR=$(pwd)
            # Using subshells with find to get full path of real package files, rather than predicting or hardcoding
            # The glob pattern with -prune causes find to only return files rooted in packages,
            # thereby avoiding files whose names would match, but are in subdirectories, i.e. packages/static.
            "${WORKING_DIR}/releng/packages/spec/clean_install/run.bash" -D \
              -p "$(find "/tmp/workspace/packages"/* -prune -name 'influxdb*amd64.deb')"

            "${WORKING_DIR}/releng/packages/spec/clean_install/run.bash" -R \
              -p "$(find "/tmp/workspace/packages"/* -prune -name 'influxdb*x86_64.rpm')"

  static_code_checks:
    docker:
      - image: quay.io/influxdb/cross-builder:<< pipeline.parameters.cross-container-tag >>
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: checkfmt
          command: ./checkfmt.sh
      - run:
          name: codegen
          command: ./generate.sh
      - run:
          name: go vet
          command: go vet ./...
  unit_test:
    docker:
      - image: quay.io/influxdb/cross-builder:<< pipeline.parameters.cross-container-tag >>
    steps:
      - checkout
      - restore_cache:
          keys:
            - influxdb-cache-v1-{{ checksum "go.mod" }}
            - influxdb-cache-v1
      - run:
          name: Execute tests
          command: |
            set -x
            mkdir -p junit
            gotestsum --junitfile junit/influxdb.junit.xml -- ./...
          no_output_timeout: 1500s
      - store_test_results:
          path: junit/
  unit_test_tsi:
    docker:
      - image: quay.io/influxdb/cross-builder:<< pipeline.parameters.cross-container-tag >>
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys:
            - influxdb-cache-v1-{{ checksum "go.mod" }}
            - influxdb-cache-v1
      - run:
          name: Execute tests
          command: |
            set -x
            mkdir -p junit-tsi
            export INFLUXDB_DATA_INDEX_VERSION="tsi1"
            gotestsum --junitfile junit-tsi/influxdb.junit.xml -- ./...
          no_output_timeout: 1500s
      - store_test_results:
          path: junit-tsi/
  unit_test_race:
    docker:
      - image: quay.io/influxdb/cross-builder:<< pipeline.parameters.cross-container-tag >>
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys:
            - influxdb-cache-v1-{{ checksum "go.mod" }}
            - influxdb-cache-v1
      - run:
          name: Execute tests
          command: |
            set -x
            mkdir -p junit-race/
            export GORACE="halt_on_error=1"
            gotestsum --junitfile junit-race/influxdb.junit.xml -- -race ./...
          no_output_timeout: 1500s
      - store_test_results:
          path: junit-race/
  fluxtest:
    docker:
      - image: quay.io/influxdb/cross-builder:<< pipeline.parameters.cross-container-tag >>
    steps:
      - checkout
      - run:
          name: Execute test
          command: ./test-flux.sh || exit 1
          no_output_timeout: 1500s
  changelog_nightly:
    docker:
      - image: quay.io/influxdb/changelogger:cf2648551b43797458d21e061501f60590b31daa
    steps:
      - checkout
      - run:
          name: Generate changelog
          command: |
            mkdir changelog_artifacts
            echo "CHANGELOG for InfluxDB OSS << pipeline.git.branch >> commit ${CIRCLE_SHA1}" > changelog_artifacts/CHANGELOG.md

            if [[ "<< pipeline.git.branch >>" == "master-1.x" ]] ;  then
               LATEST_19X="$(git tag | grep '^v1\.9\.[0-9]*$' | sort -V | tail -1)"
               # build 1.9.0 to 1.9.x changelog, plus unreleased from master
               build-multibranch-changelog.sh HEAD "$LATEST_19X" v1.9.0 >> changelog_artifacts/CHANGELOG.md
            elif [[ "<< pipeline.git.branch >>" == "1.9" ]] ;  then
               # build 1.9.0 to current 1.9 changelog
               build-simple-changelog.sh HEAD v1.9.0 >> changelog_artifacts/CHANGELOG.md
            fi

            cat ./scripts/ci/CHANGELOG_frozen.md >> changelog_artifacts/CHANGELOG.md
      - store_artifacts:
          path: changelog_artifacts/
      - aws-s3/copy:
          arguments: |
            --acl public-read
          aws-region: AWS_S3_REGION
          from: changelog_artifacts/CHANGELOG.md
          to: s3://dl.influxdata.com/platform/nightlies/<< pipeline.git.branch >>/CHANGELOG.md

workflows:
  version: 2.1
  on_push:
    jobs:
      - build_binaries
      - build_packages:
          requires:
            - build_binaries
      - test_pkgs_64bit:
          requires:
            - build_packages
      - static_code_checks
      - fluxtest
      - unit_test
      - unit_test_tsi
      - unit_test_race
  daily:
    triggers:
      - schedule:
          # run weekdays at 4am -- note: use spaces, not tabs
          cron: "0 4 * * 1-5"
          filters:
            branches:
              only:
                - "master-1.x"
                - "1.9"
    jobs:
      - changelog_nightly
      - static_code_checks
      - fluxtest
      - unit_test
      - unit_test_tsi
      - unit_test_race
      - build_binaries:
          requires:
            - changelog_nightly
            - static_code_checks
            - fluxtest
            - unit_test
            - unit_test_tsi
            - unit_test_race
      - build_packages:
          requires:
            - build_binaries
      - test_pkgs_64bit:
          requires:
            - build_packages
