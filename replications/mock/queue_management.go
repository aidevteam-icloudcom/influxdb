// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influxdb/v2/replications (interfaces: DurableQueueManager)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	platform "github.com/influxdata/influxdb/v2/kit/platform"
	durablequeue "github.com/influxdata/influxdb/v2/pkg/durablequeue"
	sqlite "github.com/influxdata/influxdb/v2/sqlite"
)

// MockDurableQueueManager is a mock of DurableQueueManager interface.
type MockDurableQueueManager struct {
	ctrl     *gomock.Controller
	recorder *MockDurableQueueManagerMockRecorder
}

// MockDurableQueueManagerMockRecorder is the mock recorder for MockDurableQueueManager.
type MockDurableQueueManagerMockRecorder struct {
	mock *MockDurableQueueManager
}

// NewMockDurableQueueManager creates a new mock instance.
func NewMockDurableQueueManager(ctrl *gomock.Controller) *MockDurableQueueManager {
	mock := &MockDurableQueueManager{ctrl: ctrl}
	mock.recorder = &MockDurableQueueManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDurableQueueManager) EXPECT() *MockDurableQueueManagerMockRecorder {
	return m.recorder
}

// CloseAll mocks base method.
func (m *MockDurableQueueManager) CloseAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAll indicates an expected call of CloseAll.
func (mr *MockDurableQueueManagerMockRecorder) CloseAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAll", reflect.TypeOf((*MockDurableQueueManager)(nil).CloseAll))
}

// DeleteQueue mocks base method.
func (m *MockDurableQueueManager) DeleteQueue(arg0 platform.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQueue indicates an expected call of DeleteQueue.
func (mr *MockDurableQueueManagerMockRecorder) DeleteQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueue", reflect.TypeOf((*MockDurableQueueManager)(nil).DeleteQueue), arg0)
}

// InitializeQueue mocks base method.
func (m *MockDurableQueueManager) InitializeQueue(arg0 platform.ID, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeQueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeQueue indicates an expected call of InitializeQueue.
func (mr *MockDurableQueueManagerMockRecorder) InitializeQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeQueue", reflect.TypeOf((*MockDurableQueueManager)(nil).InitializeQueue), arg0, arg1)
}

// QueuePath mocks base method.
func (m *MockDurableQueueManager) QueuePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// QueuePath indicates an expected call of QueuePath.
func (mr *MockDurableQueueManagerMockRecorder) QueuePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuePath", reflect.TypeOf((*MockDurableQueueManager)(nil).QueuePath))
}

// ReplicationQueues mocks base method.
func (m *MockDurableQueueManager) ReplicationQueues() map[platform.ID]*durablequeue.Queue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicationQueues")
	ret0, _ := ret[0].(map[platform.ID]*durablequeue.Queue)
	return ret0
}

// ReplicationQueues indicates an expected call of ReplicationQueues.
func (mr *MockDurableQueueManagerMockRecorder) ReplicationQueues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicationQueues", reflect.TypeOf((*MockDurableQueueManager)(nil).ReplicationQueues))
}

// StartReplicationQueues mocks base method.
func (m *MockDurableQueueManager) StartReplicationQueues(arg0 context.Context, arg1 *sqlite.SqlStore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplicationQueues", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartReplicationQueues indicates an expected call of StartReplicationQueues.
func (mr *MockDurableQueueManagerMockRecorder) StartReplicationQueues(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplicationQueues", reflect.TypeOf((*MockDurableQueueManager)(nil).StartReplicationQueues), arg0, arg1)
}

// UpdateMaxQueueSize mocks base method.
func (m *MockDurableQueueManager) UpdateMaxQueueSize(arg0 platform.ID, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaxQueueSize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMaxQueueSize indicates an expected call of UpdateMaxQueueSize.
func (mr *MockDurableQueueManagerMockRecorder) UpdateMaxQueueSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaxQueueSize", reflect.TypeOf((*MockDurableQueueManager)(nil).UpdateMaxQueueSize), arg0, arg1)
}
